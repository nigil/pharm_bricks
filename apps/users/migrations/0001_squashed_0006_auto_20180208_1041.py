# -*- coding: utf-8 -*-
# Generated by Django 1.11.10 on 2018-02-11 17:01
from __future__ import unicode_literals

from django.db import migrations, models
import django.utils.timezone
import users.models


class Migration(migrations.Migration):

    replaces = [('users', '0001_initial'), ('users', '0002_auto_20171128_2107'), ('users', '0003_auto_20171212_2329'), ('users', '0004_auto_20171219_2204'), ('users', '0005_auto_20180204_1936'), ('users', '0006_auto_20180208_1041')]

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(max_length=30, null=True, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
                ('organization', models.CharField(default='test org', max_length=128, verbose_name='organization')),
                ('region', models.CharField(blank=True, max_length=60, null=True, verbose_name='region')),
                ('city', models.CharField(blank=True, max_length=60, null=True, verbose_name='city')),
                ('country', models.CharField(blank=True, max_length=60, null=True, verbose_name='country')),
                ('delivery_address', models.CharField(max_length=300)),
                ('phone', models.CharField(max_length=20, verbose_name='Telephone number')),
                ('postcode', models.CharField(blank=True, max_length=20, null=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', users.models.UserManager()),
            ],
        ),
    ]
